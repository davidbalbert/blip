PMs to Ori

A few scattered thoughts on reference counting.

Consider these two axes (obviously there are more, like automatic vs manual):

- property of a type vs property of a pointer
- built-in vs stdlib

Examples:

**Property of a pointer + stdlib, like Rust and I'm pretty sure C++**

```
type Foo Struct {}
f := Foo{}
var rc Rc<Foo> = Rc{&f}
w := NewWeak(rc) // func because it has to copy the underlying pointer, and add itself to rc's table of weak references.
```

I believe this is the only version that requires generics.

**Property of a pointer + built-in**

```
type Foo struct {}
f := Foo{}
var rc (strong *Foo) = &f // alts: (counted *Foo), (refcnt *Foo)
w := (weak *Foo) rc
```

I'm sure there are other languages that do this, but I can't think of any off the top of my head.

One issue: with this syntax it's still possible to talk about the stack allocated `f`, make a non-refcounted pointer to the same memory, or make a second unrelated refcounted pointer to the same memory.

**Property of the type + built-in, like Swift**

```
type Foo counted struct {}
rc := Foo() // alt: &Foo{}. Either way, a bare Foo{} should be disallowed.
w := (weak Foo) rc
```

This means you can't have a stack allocated Foo. All vars of type Foo are references.

**Property of the type + Stdlib**

This is interesting, and potentially a new design space. Notably it's in the stdlib but doesn't seem to require generics.

```
type Foo struct {
    std.Rc // zero value means refcount=1
}

type Rc struct {
    cnt int // refcount <> cnt + 1 so that cnt=0 can be refcount=1
}

f1 := &Foo{} // heap allocated, refcount=1
f1.retain()  // refcount=2
f2 := f1     // refcount=2

f3 := Foo{} // stack allocated, refcount=1
f3.retain() // refcount=2
f4 := f3    // uh-oh, f3.refcount=2, f4.refcount=2, but they're now two separate values, each with one "reference."
```

There are some problems:
- The stack allocated Foo is borderline nonsensical. Way worse than the footgun in "Property of a pointer + built-in". You have two copies of the struct in memory, and they each have refcount=2 while they "should" have refcount=1 (putting aside that none of this really makes sense).
- If you want automatic reference counting (which I want), you probably need copy constructors (which I don't want).


Perhaps there are ways around the stack allocated stuff: if, unlike Go, a method defined on *Foo couldn't be called on a Foo, perhaps you could make retain/release only work on references.

```
func (rc *Rc) retain() {}
func (rc *Rc) release() {}

f1.retain() // typeof(f1)=*Rc, ok!
f3.retain() // typeof(f3)=Rc, compile error!
```

Not sure how far this gets you. And I'm also not sure if this is a good idea

Here's another weird idea that breaks down on closer inspection:

```
type rc struct {
    cnt int
}

// Rc is just a pointer, but it's not copyable
type Rc nocopy *rc

// deinit is a special name. Only nocopy types can have deinit.
func (rc Rc) deinit() {
}

// a struct that contains a nocopy type must itself be nocopy
type Foo nocopy struct {
    std.Rc
}

f1 := &Foo{}
f2 := f1          // compile error, Rc is nocopy

// You want to be able to do this:
f2 := f1.retain()

// But there's no good way to write a retain such that it returns a new Foo, not just a new Rc.

func (p Rc) retain() Rc {
    // Seems impossible
}
```

Alternatively, perhaps there's a way to build Rc so that Foo isn't allowed to be stack allocated at all, and thus you always have a single value with multiple references, but at this point, we're jumping through a lot of hoops for little gain.

My sense is that one of the built-in options is best. This makes it easy to do automatic reference counting, and neither option requries generics. I'd lean towards "property of a pointer" rather than "property of a type."

If you know what you're doing, there are definitely situations where youd want non-heap allocated things to be reference counted (e.g. a global array of file system blocks), but if you're doing that, you can just embed `refcount int` in the struct and roll your own.

But perhaps some of the ideas explored in **Property of the type + Stdlib** would be useful for other things. In particular the idea of `nocopy` pointers is pretty interesting. Doesn't even have to be in a type alias: e.g. `var p (nocopy *Bar) = &Bar{}`.


Two more thoughts:

**nocopy pointers**

Here's a common pattern in C:

```
struct Foo; // opaque
typedef struct Foo *FooRef;

// functions, e.g.
char *FooGetName(FooRef foo);
```

Here's a similar pattern in Blip:

```
type foo struct {}
type Foo *foo
```

Not particularly interesting, and also not particularly necessary if we retain all of Go's zero-value semantics in the face of non-exported fields (see below).

But with nocopy pointers, its more interesting:

```
type foo struct {}
type Foo nocopy *foo
```

I still don't know what, if anything, this will be useful for. But being able to have nocopy apply to structs, pointers, or both is really interesting.

- nocopy struct
- nocopy pointers
    - to a copyable struct
    - to a nocopy struct
    - as part of a type alias
- type aliases that just add nocopy to an existing type :
    - `type Foo struct {}`
    - `type Bar nocopy Foo`
    - `type Baz nocopy *Foo`
    - `type Fd nocopy int`

**Zero values and unexported fields**

In Go, you can have unexported fields:

```
package foo

type Foo {
    // unexported fields
}

package bar

f := foo.Foo{}
fp := &f
```

There's something interesting here. I don't actually know how Go handles this.

1. When Go's compiling "bar", is the size of foo.Foo known? If not, it wouldn't be possible to actually store this on the stack.
2. How does initialization work? Are the zero values for all types actually made of bytes containing all 0s? If not, it seems like you'd need a hidden "constructor" function to build the zero value (e.g. `foo.Foo{}` desugars to `foo._NewFoo()`).

Maybe Go just ignores this – if you have the source for every package, non-exported fields can be a suggestion. The compiler won't let you access them from inside your package, but it still knows what all the fields are so it can initialize the zero value correctly and the compiler also knows the size so that I can be stored on the stack.

But if we want to have libfoo.so and libbar.so, both written in Blip, and to have Go's zero value semantics, we'd need to handle those situations.

Furthermore, for calling Blip code from C, we'll either have to say "you can't rely on zero values of types with unexported fields outside of Blip," and leave it to the library author to write their own wrapper functions that are exposed to C, or we'll have to come up with some system of autogenerated initialization functions that are exported automatically exported to C – this is more complicated than on first blush, because if Foo has both exported and non exported fields, and you want full expressivity, we'll need to gerneate an initialization function for each combination of exported fields (so you can do any of `Foo{}; Foo{a:1, b: 2}; Foo{a:1}, Foo{b:2}`).


There are also all sorts of good questions re: zero values and defining a stable ABI.



# Flow analysis and pointer nil checking

Also, I found [this](https://github.com/golang/go/issues/49202), and [this](https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-8.0/nullable-reference-types) last night, and I rather like the ideas. Gotta play around with it, but this seems really nice:

```
var p ?*int
*p // compile error: p might be nil
if p == nil {
    // ...
    // return
}
// at this point p is a *int.
*p // no error
```

```
var p ?*int
if p != nil {
    // ...
    return
}
*p // compile error: p is guaranteed to be nil.
// the above is similar to the way a variable that once held a nocopy type that has been moved out can no longer be accessed
```

```
var p ?*int
if p == nil {
    // ...
    // no return
}
// p is still ?*int
*p // compile error: p might be nil
```

Obviously this doesn't prevent use after free though. Have to think more about borrows etc. and how they would fit into this. Your proposal to make `*int` a borrowed reference might be the way to go. But I haven't done enough thinking to understand what that might look like.

I like how this has the same effect as Swift's `guard else` for safely unwrapping without creating a new nested scope, but without introducing any other keywords or semantics. You write it just like you would in C, but the compiler is more helpful.

Other thoughts:
1. You can use a force unwrap to get rid of the error: `*(p!)` or something like that. Don't love the way that's spelled  though.
2. Not sure if these should be errors or warnings. I think probably errors, but there's something about making them warnings that appeals to me – the language wants to help you do the right thing, not force you to. One argument for errors: you want the rules to be the same for optional values (e.g. `?int`) and it's not quite clear what that would look like.
3. Not sure how expensive this sort of flow analysis is. I wouldn't want to do this at the expense of fast compile times.

Alternatively, instead of optional pointers, you could have normal pointers and non-nil pointers (maybe `!*int`), in which case, you don't need to make the handling of nil pointers the same as handling all other optional types. This would make it easy to turn the above errors into warnings, if that's something we wanted to do.

This would work best if you got rid of optional types entirely. Otherwise, in a world with `!*int`, what does `?*int` mean? But I don't know that getting rid of optional types is a great idea.

If you do get rid of optional types, you could apply the same flow analysis to other situations. E.g.,

```
var nums []string
i := slices.IndexOf(nums, "foo")
fmt.Println(nums[i]) // warning: i could be -1.
```

OTOH, being able to index into slices with negative numbers is a nice feature (e.g. `nums[-2]` is the same as `nums[len(nums)-2]`), and if that's the case, you probably want IndexOf to return something else, and ?int is the obvious answer.
